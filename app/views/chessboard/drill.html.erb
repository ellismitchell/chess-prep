<% content_for :js do %>
	<script>
		$(document).ready(function(){
			var fenStr = "";
			drillNextMove();
		});
		function renderBoard(data) {
			if (data.move == "no move"){
				$.ajax({
					url: '/positions',
					dataType: 'json'
				}).then(renderNewBoard);
			}

			$('#message').html("Play the right move!");
			fenStr = data.position;
			var board,
			game = new Chess(fenStr),
			movesEl = $('#moves');
			movesEl.empty();
			var onDragStart = function(source, piece, position, orientation) {
				if (game.game_over() === true ||
					(game.turn() === 'w' && piece.search(/^b/) !== -1) ||
					(game.turn() === 'b' && piece.search(/^w/) !== -1)) {
					return false;
				}
			};

			var onDrop = function(source, target) {
			  var prev = game.fen();
			  var move = game.move({
			  	from: source,
			  	to: target,
			    promotion: 'q'
			  });
			  if (move === null)
			  	return 'snapback';
			  else {
			  	if (move.san == data.san) {
			  		$.ajax({
			  			url: '/moves/'+data.id+'/correct',
			  			type: 'POST'
			  		}).then(function(time) {
			  			$('#correct').html("Correct! Next due in "+time.time);
			  			$('#right').effect("highlight", {}, 1000);
			  			drillNextMove();
			  		});
			  	}
			  	else {
			  		$.ajax({
			  			url: '/moves/'+data.id+'/incorrect',
			  			type: 'POST'
			  		}).then(function() {
			  			$('#correct').html("Incorrect! Correct was " + data.san + ". Next due in 30 seconds.");
			  			$('#right').effect("highlight", {color: '#ff9999'}, 1000);
			  			drillNextMove();
			  		});
			  	}
			  }
			};

			var onSnapEnd = function() {
				board.position(game.fen());
			};

			if (game.turn() == 'b')
				var orientation = 'black';
			else
				var orientation = 'white';

			var cfg = {
				orientation: orientation,
				draggable: true,
				position: fenStr,
				onDragStart: onDragStart,
				onDrop: onDrop,
				onSnapEnd: onSnapEnd
			};
			board = ChessBoard('board', cfg);
		}

		function renderNewBoard(data) {
			$('#message').html("Add a new move!");
			if (!data) {
				var game = new Chess();
				$.ajax({
					url: '/positions',
					type: 'POST',
					data: {
						position: {
							fen: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',
							likelihood: 1
						}
					}
				})
				$.ajax({
					url: 'https://expl.lichess.org/master?fen=rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',
					dataType: 'json'
				}).then(function(lichessData){
					var total = lichessData.white+lichessData.draws+lichessData.black;
					var requests = 0;
					lichessData.moves.forEach((m) => {
						game.move(m.san);
						var pos = game.fen();
						var mTotal = m.white+m.draws+m.black;
						$.ajax({
							url: '/positions',
							type: 'POST',
							data: {
								position: {
									fen: pos,
									likelihood: mTotal/total
								}
							}
						}).then(() => {
							requests++;
							if (requests >= lichessData.moves.length)
								drillNextMove();
						});
						game.undo();
					});
				});
			}
			else {
				var fenStr = data.fen;
				var board,
				game = new Chess(fenStr),
				statusEl = $('#status'),
				fenEl = $('#fen'),
				pgnEl = $('#pgn'),
				movesEl = $('#moves');

				var onDragStart = function(source, piece, position, orientation) {
					if (game.game_over() === true ||
						(game.turn() === 'w' && piece.search(/^b/) !== -1) ||
						(game.turn() === 'b' && piece.search(/^w/) !== -1)) {
						return false;
					}
				};

				var onDrop = function(source, target) {
				  var prev = game.fen();
				  var move = game.move({
				  	from: source,
				  	to: target,
				    promotion: 'q'
				  });

				  if (move === null)
				  	return 'snapback';
				  else {
				  	$.ajax({
				  		url: 'https://expl.lichess.org/master?fen='+game.fen(),
				  		dataType: "json"
				  	}).then(function(lichessData){
				  		var total = lichessData.white+lichessData.draws+lichessData.black;
				  		var requests = 0;
				  		$.ajax({
				  			url: '/moves',
				  			type: 'POST',
				  			data: {
				  				move: {
				  					position_id: data.id,
				  					position: prev,
				  					resulting_position: game.fen(),
				  					san: move.san,
				  					likelihood: data.likelihood
				  				}
				  			}
				  		}).then((moveData) => {
				  			requests++;
				  			if (requests >= lichessData.moves.length + 1)
				  				drillNextMove();
				  			lichessData.moves.forEach((m) => {
				  				game.move(m.san);
				  				var pos = game.fen();
				  				var mTotal = m.white+m.draws+m.black;
				  				$.ajax({
				  					url: '/positions',
				  					type: 'POST',
				  					data: {
				  						position: {
				  							fen: pos,
				  							likelihood: mTotal/total * data.likelihood
				  						},
				  						parent_id: moveData.id
				  					}
				  				}).then(() => {
				  					requests++;
				  					if (requests >= lichessData.moves.length + 1) {
				  						$('#correct').empty();
				  						drillNextMove();
				  					}
				  				});
				  				game.undo();
				  			});
				  		});
				  	});
				  }
				};

				var onSnapEnd = function() {
					board.position(game.fen());
				};

				if (game.turn() == 'b')
					var orientation = 'black';
				else
					var orientation = 'white';
				var cfg = {
					orientation: orientation,
					draggable: true,
					position: fenStr,
					onDragStart: onDragStart,
					onDrop: onDrop,
					onSnapEnd: onSnapEnd
				};
				board = ChessBoard('board', cfg);
				$.ajax({
				  	url: 'https://expl.lichess.org/master?fen='+game.fen(),
				  	dataType: "json"
				  }).then(function(lichessData){
				  	movesEl.empty();
				  	var total = lichessData.white+lichessData.draws+lichessData.black;
				  	lichessData.moves.forEach((move) => {
				  		var moveTotal = move.white+move.draws+move.black;
				  		var percent = moveTotal/total * 100;
				  		if (percent > 0.1)
				  			movesEl.append("<p>"+move.san+": "+percent.toFixed(1)+"%</p>");
				  	});
				  });
			}
		}  

		function drillNextMove(){
			$.ajax({
				url: "/moves",
				dataType: "json"
			}).then(renderBoard);
		}

	</script>
<% end %>
<div id="board" style="width: 600px"></div>
<div id="right">
	<div id="correct"></div>
	<div id="message"></div>
	<div id="moves"></div>
</div>
<div id="bottom">
	<%= link_to "Edit Moves", edit_path %>
</div>