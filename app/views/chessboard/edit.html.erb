<% content_for :js do %>
  <script>
    $(document).ready(function(){
    	renderBoard();
});
   

function renderBoard() {


	var board,
	  game = new Chess(),

	  statusEl = $('#status'),
	  fenEl = $('#fen'),
	  pgnEl = $('#pgn'),
	  movesEl = $('#moves');



	// do not pick up pieces if the game is over
	// only pick up pieces for the side to move
	var onDragStart = function(source, piece, position, orientation) {
	  if (game.game_over() === true ||
	      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
	      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
	    return false;
	  }
	};

	var onDrop = function(source, target) {
	  // see if the move is legal
	  var move = game.move({
	    from: source,
	    to: target,
	    promotion: 'q' // NOTE: always promote to a queen for example simplicity
	  });


	  // illegal move
	  if (move === null)
	  	return 'snapback';

	  updateStatus();
	};

	// update the board position after the piece snap 
	// for castling, en passant, pawn promotion
	var onSnapEnd = function() {
	  board.position(game.fen());
	};

	var updateStatus = function() {
	  var status = '';

	  var moveColor = 'White';
	  if (game.turn() === 'b') {
	    moveColor = 'Black';
	  }

	  // checkmate?
	  if (game.in_checkmate() === true) {
	    status = 'Game over, ' + moveColor + ' is in checkmate.';
	  }

	  // draw?
	  else if (game.in_draw() === true) {
	    status = 'Game over, drawn position';
	  }

	  // game still on
	  else {
	    status = moveColor + ' to move';

	    // check?
	    if (game.in_check() === true) {
	      status += ', ' + moveColor + ' is in check';
	    }
	  }

	  $.ajax({
	  	url: '/moves/position',
	  	dataType: 'json',
	  	data: {
	  		fen: game.fen()
	  	}
	  }).then(function(moveData){
	  	$.ajax({
	  	url: 'https://expl.lichess.org/master?fen='+game.fen(),
	  	dataType: "json"
	  }).then(function(lichessData){
	  	movesEl.empty();
	  	let total = lichessData.white+lichessData.draws+lichessData.black;
	  	lichessData.moves.forEach((move) => {
	  		let moveTotal = move.white+move.draws+move.black;
	  		let percent = moveTotal/total * 100;
	  		if (percent > 0.1) {
	  			if (moveData && move.san == moveData.san)
	  				movesEl.append("<p><b>"+move.san+": "+percent.toFixed(1)+"%</b></p><button class='delete'>Delete</button>");
	  			else
	  				movesEl.append("<p>"+move.san+": "+percent.toFixed(1)+"%</p>");
	  		}
	  	});

	  	$('button.delete').click(function(){
	  		if (confirm("Are you sure you want to delete this move? (All progress will be lost)")){
	   			$.ajax({
	   				url: '/moves/delete',
	   				type: 'POST',
	   				data: {
	   					fen: game.fen()
	   				}
	   			}).then(updateStatus);
	   		}
   		});
	  });
	  });

	  

	  



	  statusEl.html(status);
	  fenEl.html(game.fen());
	  pgnEl.html(game.pgn());
	};

	if (game.turn() == 'b')
		var orientation = 'black';
	else
		var orientation = 'white';
	var cfg = {
		orientation: orientation,
	  draggable: true,
	  position: 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1',
	  onDragStart: onDragStart,
	  onDrop: onDrop,
	  onSnapEnd: onSnapEnd
	};
	board = ChessBoard('board', cfg);

	updateStatus();
}  



  </script>
<% end %>

<div id="board" style="width: 600px"></div>
<p>Status: <span id="status"></span></p>
<p>Fen: <span id="fen"></span></p>
<div id="user-move"></div>
<div id="moves"></div>